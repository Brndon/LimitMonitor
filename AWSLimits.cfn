{
	"Parameters": {
		"TopicEmail": {
			"Default": "your.address@here.com",
			"Description": "E-Mail address to subscribe to alerts",
			"Type": "String"
		},
		"S3Bucket": {
			"Default": "examplebucket",
			"Description": "Bucket where Lambda function is stored",
			"Type": "String"
		},
		"MasterS3Key": {
			"Default": "LimitMonkeyEE-master.zip",
			"Description": "Path and name of Master Lambda Function zip file",
			"Type": "String"
		},
		"ChildS3Key": {
			"Default": "LimitMonkeyEE-check.zip",
			"Description": "Path and name of Child Lambda Function zip file",
			"Type": "String"
		}		
	},
	"Resources": {
		"SNSTopic": {
			"Type": "AWS::SNS::Topic",
			"Properties": {
				"DisplayName": "AWS Limits SNS",
				"Subscription": [{
					"Endpoint": {
						"Ref": "TopicEmail"
					},
					"Protocol": "email"
				}],
				"TopicName": "AWSLimitsSNS"
			}
		},
		"MasterLambda": {
			"Type": "AWS::Lambda::Function",
			"Properties": {
				"Code": {
					"S3Bucket": {"Ref": "S3Bucket"},
					"S3Key": {"Ref": "MasterS3Key"}
				},
				"Handler": "limitMaster.lambda_handler",
				"Role": {"Fn::GetAtt" : [ "LRole", "Arn" ]},
				"Runtime": "python2.7",
				"Timeout": "300"
			},
			"DependsOn": "LRole"
		},
		"ChildLambda": {
			"Type": "AWS::Lambda::Function",
			"Properties": {
				"Code": {
					"S3Bucket": {"Ref": "S3Bucket"},
					"S3Key": {"Ref": "ChildS3Key"}
				},
				"Handler": "limitCheck.lambda_handler",
				"Role": {"Fn::GetAtt" : [ "LRole", "Arn" ]},
				"Runtime": "python2.7",
				"Timeout": "300"
			},
			"DependsOn": "LRole"
		},
		"LRole": {
			"Type": "AWS::IAM::Role",
			"Properties": {
				"AssumeRolePolicyDocument": {
					"Version": "2012-10-17",
					"Statement": [{
						"Effect": "Allow",
						"Principal": {
							"Service": "lambda.amazonaws.com"
						},
						"Action": "sts:AssumeRole"
					}]
				},
				"Path": "/",
				"Policies": [{
					"PolicyName": "Limits-AssumeRole",
					"PolicyDocument": {
						"Version": "2012-10-17",
						"Statement": [{
							"Effect": "Allow",
							"Action": ["sts:AssumeRole","lambda:Invoke*","SNS:Publish"],
							"Resource": ["*"]
						}]
					}
				}]
			}
		}
	},
	"Outputs": {
 		"PutRule" : {
		    "Description" : "Script #1: Run this in the account you are deploying this template in to schedule your event.  Change rate as desired.",
    		"Value" : { "Fn::Join": ["", ["aws events put-rule --name Limits --schedule-expression \"rate(2 hours)\" --state DISABLED --region ", {"Ref" : "AWS::Region"}]]}
  		},
  		"PutTarget" : {
  			"Description" : "Script #2: Run this in the account you are deploying this template in to trigger the function when your event is scheduled",
  			"Value" : {
  				"Fn::Join": 
  				["", 
  					[
  						"aws events put-targets --rule Limits --target '[{\"Id\":\"Limits\",\"Arn\":\"", 
  						{"Fn::GetAtt":["MasterLambda","Arn"]},
  						"\",\"Input\":\"{\\\"Region\\\":\\\"",
  						{"Ref" : "AWS::Region"},
  						"\\\",\\\"AccountList\\\":[\\\"",
  						{"Ref" : "AWS::AccountId"},
  						"\\\"],\\\"RegionList\\\":[\\\"us-east-1\\\",\\\"us-west-1\\\",\\\"us-west-2\\\"],\\\"ChildLambda\\\":\\\"",
  						{"Ref" : "ChildLambda"},
  						"\\\",\\\"SNSArn\\\":\\\"",
  						{"Ref" : "SNSTopic"},
  						"\\\"}\"}]' --region ",
  						{"Ref" : "AWS::Region"}
  					]
  				]
  			}
  		},
  		"CreateRole" : {
  			"Description" : "Script #3: Run this to create a role in each account you want to deploy to",
  			"Value" : {
  				"Fn::Join": 
  				["", 
  					[
  						"aws iam create-role --role-name AWSLimitsRole --assume-role-policy-document '{\"Version\": \"2012-10-17\",\"Statement\": [{\"Effect\": \"Allow\",\"Principal\": {\"AWS\": \"",
  						{"Ref" : "AWS::AccountId"},
  						"\"},\"Action\": \"sts:AssumeRole\"}]}'"
  					]
  				]
  			}
  		},
  		"AttachPolicy1" : {
  			"Description" : "Script #3: Run this to give the role read only access",
  			"Value" : {
  				"Fn::Join": 
  				["", 
  					[
  						"aws iam attach-role-policy --policy-arn arn:aws:iam::aws:policy/ReadOnlyAccess --role-name AWSLimitsRole"
  					]
  				]
  			}
  		},
  		"AttachPolicy2" : {
  			"Description" : "Script #3: Run this to give the role access to the Support API for TrustedAdvisor access",
  			"Value" : {
  				"Fn::Join": 
  				["", 
  					[
  						"aws iam attach-role-policy --policy-arn arn:aws:iam::aws:policy/AWSSupportAccess --role-name AWSLimitsRole"
  					]
  				]
  			}
  		}
  	}
}
